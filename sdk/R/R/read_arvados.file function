# read function (deals with different formats)
read_arvados.file <- function(file, istable = NULL, fileclass = "SeqFastadna", ile_kolumn = NULL, ile_wierszy = NULL)
{ # file is arvadosFile after creating a connection
    # check if it is supported format
    FileName <- file$getName() # if function will be in arvadosFile file
    FileName <- tolower(FileName)
    FileFormat <- gsub(".*\\.", "", FileName)
    if (FileFormat == "txt") {
        if (is.null(istable)){
            stop(paste('You need to paste whether it is a text or table file'))
        } else if (istable == 'no') {
            fileContent <- arvadosFile$read("text") # used to read
            fileContent <- gsub("[\r\n]", " ", fileContent)
        } else if (istable == 'yes') {
            arvConnection <- arvadosFile$connection("r") # used to make possible use different function later
            fileContent <- read.table(arvConnection)
        }
    }
    else if (FileFormat  == "xlsx") {
        arvConnection <- arvadosFile$connection("r")
        fileContent   <- read.table(arvConnection)
    }
    else if (FileFormat == "csv") {
        arvConnection <- arvadosFile$connection("r")
        mytable <- read.table(arvConnection, sep = ',')
    }
    else if (FileFormat == "fasta") {
        fileContent <- arvadosFile$read("text")

        # function to prosess data to fasta file
        read_fasta.file <- function(file){
            new_file <- file
            name <- sub("\r\n.*", "", new_file)
            new_file <- sub(name, '', new_file)
            new_file <- gsub("[\r\n]", "", new_file)
            # add first atrr (name)
            name <- sub(" .*", "", name)
            name <- sub(".*>", "", name)
            # add second atrr (Annot)
            annot <- sub("\r.*", "", file)
            # final:
            attr(new_file, 'name') <- name
            attr(new_file, 'Annot') <- annot
            attr(new_file, 'class') <- fileclass
            new_file
        }
        fastafile <- read_fasta.file(fileContent)
    }
    else if (FileFormat == "dat") {
        #fileContent <- arvadosFile$read()
        fileContent <- gzcon(arvadosFile$connection("rb"))

        # function to precess data to binary format
        read_bin.file <- function(fileContent) {
            # read binfile
            column.names <- readBin(fileContent, character(), n = ile_kolumn)
            bindata <- readBin(fileContent, numeric(), ile_wierszy*ile_kolumn+ile_kolumn)
            # check
            res <- which(bindata < 0.0000001)
            if (is.list(res)) {
                bindata <- bindata[-res]
            } else {
                bindata <- bindata
            }
            # make a dataframe
            data <- data.frame(matrix(data = NA, nrow = ile_wierszy, ncol = ile_kolumn))
            for (i in 1:ile_kolumn) {
                data[,i] <- bindata[(1+ile_wierszy*(i-1)):(ile_wierszy*i)]
            }
            colnames(data) = column.names

            len <- which(is.na(data[,ile_kolumn])) # error if sth went wrong
            if (length(len) == 0) {
                data
            } else {
                stop(paste("there is a factor or text in the table, customize the function by typing more arguments"))
            }
        }
        if (is.null(ile_wierszy) | is.null(ile_kolumn)){
            stop(paste('You need to specify numbers of columns and rows'))
        }
        if (is.null(istable)) {
            fileContent <- read_bin.file(fileContent) # call a function
        } else if (istable == "factor") { # if there is a table with col name
            #col_factor <- readline(prompt= "Which column contains factor? ") # 5
            #col_factor <- as.integer(col_factor)
            fileContent <- read_bin.file(fileContent)
            #mess <- paste("Remember to change factor to string")
            #return(list(fileContent, mess))
        }
    }
    else if (FileFormat == "rds") {
        arvConnection <- arvadosFile$connection("rb")
        mytable <- readRDS(gzcon(arvConnection))
    }
    else {
        stop(parse(('File format not supported')))
    }
    }

# ------------------------- USAGE -----------------------------

arvadosFile   <- collection$get("iris.txt") # table
wynik <- read_arvados.file(arvadosFile, istable = 'yes')
wynik <- read_arvados.file(arvadosFile)

arvadosFile <- collection$get("potop.txt") # text
wynik <- read_arvados.file(arvadosFile, istable = 'no')

arvadosFile   <- collection$get("iris_xlsx.xlsx") # excel
wynik <- read_arvados.file(arvadosFile)

arvadosFile   <- collection$get("mtcars.csv") # csv
wynik <- read_arvados.file(arvadosFile)

arvadosFile <- collection$get("fasta_example.fasta") # fasta
wynik <- read_arvados.file(arvadosFile)
wynik <- read_arvados.file(arvadosFile, fileclass = 'lala')

arvadosFile <- collection$get("testbin2.dat") # binary numbers
wynik <- read_arvados.file(arvadosFile) # error :)
wynik <- read_arvados.file(arvadosFile, ile_kolumn = 4, ile_wierszy = 32)

arvadosFile <- collection$get("iris.dat") # binary numbers + factor
wynik <- read_arvados.file(arvadosFile, ile_kolumn = 5, ile_wierszy = 150, istable = "factor")

# binary numbers + text

arvadosFile <- collection$get("mtcars.RDS") # rds numbers
wynik <- read_arvados.file(arvadosFile)

arvadosFile <- collection$get("iris.rds") # rds numbers + factor
wynik <- read_arvados.file(arvadosFile)

# To sum up:
# - txt text: works
# - txt table: works
# - csv: works
# - xlsx: works
# - fasta: works
# - bin:
#   - tabela numbers: works
#   - tabela numbers + factor: works
#   - tabela numbers + text: ??? (tomorrow, workbench is dead for now)
# - rds: works
