---
layout: default
navsection: installguide
title: Install Keepstore servers
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

# "Introduction":#introduction
# "Update config.yml":#update-config
# "Install keepstore package":#install-packages
# "Restart the API server and controller":#restart-api
# "Confirm working installation":#confirm-working
# "Note on storage management":#note

h2. Introduction

Keepstore provides access to underlying storage for reading and writing content-addressed blocks, with enforcement of Arvados permissions.  Keepstore supports a variety of cloud object storage and POSIX filesystems for its backing store.

h3. Plan your storage layout

In the steps below, you will configure a number of backend storage volumes (like local filesystems and S3 buckets) and specify which keepstore servers have read-only and read-write access to which volumes.

It is possible to configure arbitrary server/volume layouts. However, in order to provide good performance and efficient use of storage resources, we strongly recommend using one of the following layouts:

# Each volume is writable by exactly one server, and optionally readable by one or more other servers. The total capacity of all writable volumes is the same for each server.
# Each volume is writable by all servers. Each volume has enough built-in redundancy to satisfy your requirements, i.e., you do not need Arvados to mirror data across multiple volumes.

We recommend starting off with two Keepstore servers.  Exact server specifications will be site and workload specific, but in general keepstore will be I/O bound and should be set up to maximize aggregate bandwidth with compute nodes.  To increase capacity (either space or throughput) it is straightforward to add additional servers, or (in cloud environments) to increase the machine size of the existing servers.

By convention, we use the following hostname pattern:

<div class="offset1">
table(table table-bordered table-condensed).
|_. Hostname|
|@keep0.ClusterID.example.com@|
|@keep1.ClusterID.example.com@|
</div>

Keepstore servers should not be directly accessible from the Internet (they are accessed via "keepproxy":install-keepproxy.html), so the hostnames only need to resolve on the private network.

h2(#update-config). Update cluster config

h3. Configure storage volumes

Fill in the @Volumes@ section of @config.yml@ for each storage volume.  Available storage volume types include POSIX filesystems and cloud object storage.  It is possible to have different volume types in the same cluster.

* To use a POSIX filesystem, including both local filesystems (ext4, xfs) and network file system such as GPFS or Lustre, follow the setup instructions on "Filesystem storage":configure-fs-storage.html
* If you are using S3-compatible object storage (including Amazon S3, Google Cloud Storage, and Ceph RADOS), follow the setup instructions on "S3 Object Storage":configure-s3-object-storage.html
* If you are using Azure Blob Storage, follow the setup instructions on "Azure Blob Storage":configure-azure-blob-storage.html

There are a number of general configuration parameters for Keepstore. They are described in the "configuration reference":{{site.baseurl}}/admin/config.html. In particular, you probably want to change @API/MaxKeepBlobBuffers@ to align Keepstore's memory usage with the available memory on the machine that hosts it.

h3. List services

Add each keepstore server to the @Services.Keepstore@ section of @/etc/arvados/config.yml@ .

<notextile>
<pre><code>    Services:
      Keepstore:
        # No ExternalURL because they are only accessed by the internal subnet.
        InternalURLs:
          "http://<span class="userinput">keep0.ClusterID.example.com</span>:25107": {}
          "http://<span class="userinput">keep1.ClusterID.example.com</span>:25107": {}
          # and so forth
</code></pre>
</notextile>

{% assign arvados_component = 'keepstore' %}

{% include 'install_packages' %}

{% include 'start_service' %}

{% include 'restart_api' %}

h2(#confirm-working). Confirm working installation

We recommend using the "Cluster diagnostics tool.":diagnostics.html

Here are some other checks you can perform manually.

Log into a host that is on your private Arvados network.  The host should be able to contact your your keepstore servers (eg keep[0-9].ClusterID.example.com).

@ARVADOS_API_HOST@ and @ARVADOS_API_TOKEN@ must be set in the environment.

@ARVADOS_API_HOST@ should be the hostname of the API server.

@ARVADOS_API_TOKEN@ should be the system root token.

Install the "Command line SDK":{{site.baseurl}}/sdk/cli/install.html

Check that the keepstore server is in the @keep_service@ "accessible" list:

<notextile>
<pre><code>$ <span class="userinput">arv keep_service accessible</span>
[...]
</code></pre>
</notextile>

If keepstore does not show up in the "accessible" list, and you are accessing it from within the private network, check that you have "properly configured the @geo@ block for the API server":install-api-server.html#update-nginx .

Next, install the "Python SDK":{{site.baseurl}}/sdk/python/sdk-python.html

You should now be able to use @arv-put@ to upload collections and @arv-get@ to fetch collections.  Be sure to execute this from _inside_ the cluster's private network.  You will be able to access keep from _outside_ the private network after setting up "keepproxy":install-keepproxy.html .

{% include 'arv_put_example' %}

h2(#note). Note on storage management

On its own, a keepstore server never deletes data. Instead, the keep-balance service determines which blocks are candidates for deletion and instructs the keepstore to move those blocks to the trash. Please see the "Balancing Keep servers":{{site.baseurl}}/admin/keep-balance.html for more details.
